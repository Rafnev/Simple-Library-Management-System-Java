
import javax.swing.JOptionPane;
import java.sql.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class BookIssueView extends javax.swing.JFrame {

    Connection con;
    Statement st;
    ResultSet rs;

    
    public BookIssueView() {
        initComponents();
        connect();
    }
    
    public void connect() {
        try{
            String DRIVER = "sun.jdbc.odbc.JdbcOdbcDriver";
            Class.forName(DRIVER);
            
            String db = "jdbc:odbc:LibraryManagementDatabase";
            con = DriverManager.getConnection(db);
            
            st = con.createStatement();
        } catch(Exception e){
            System.err.println(e);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        studentRollTf = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bookSrcTf = new javax.swing.JTextField();
        bookSrcB = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        issueB = new javax.swing.JButton();
        selectedL = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(750, 550));
        setMinimumSize(new java.awt.Dimension(750, 550));
        setPreferredSize(new java.awt.Dimension(750, 550));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Student Roll");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Book Name");

        bookSrcB.setFont(new java.awt.Font("Lithos Pro Regular", 1, 14)); // NOI18N
        bookSrcB.setForeground(new java.awt.Color(0, 0, 255));
        bookSrcB.setText("Search Book");
        bookSrcB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookSrcBActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Book Name", "Author Name", "Availablity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        issueB.setFont(new java.awt.Font("Lithos Pro Regular", 1, 14)); // NOI18N
        issueB.setForeground(new java.awt.Color(0, 0, 255));
        issueB.setText("Issue");
        issueB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                issueBMouseClicked(evt);
            }
        });
        issueB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueBActionPerformed(evt);
            }
        });

        selectedL.setForeground(new java.awt.Color(255, 0, 0));

        jButton1.setFont(new java.awt.Font("Lithos Pro Regular", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 255));
        jButton1.setText("<< Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(bookSrcTf, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(studentRollTf, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectedL, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(149, 149, 149)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(issueB, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(bookSrcB, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(480, 480, 480)
                        .addComponent(jButton1)))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                            .addComponent(studentRollTf))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookSrcTf, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(bookSrcB, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(selectedL, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(issueB, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookSrcBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookSrcBActionPerformed
        selectedL.setText("");
        
        DefaultTableModel m = (DefaultTableModel) jTable1.getModel();
        m.setRowCount(0);        
        
        if(bookSrcTf.getText().trim().toString().equals("")){
            JOptionPane.showMessageDialog(null, "Enter a book name", "Book Name", JOptionPane.ERROR_MESSAGE, null);
        } else {
            String sql = "SELECT * FROM BookTable WHERE BookName LIKE '" + bookSrcTf.getText().trim().toString().toLowerCase() + "'";            
            
            try {
                rs = st.executeQuery(sql);
                
                //rs to arraylist save
                ArrayList<List<String>> l = new ArrayList<List<String>>();

                while (rs.next()) {
                    String av = "No";
                    String st = rs.getString("Availablity");

                    if (st.compareTo("1") == 0) {
                        av = "Yes";
                    }
                    
                    l.add(Arrays.asList(rs.getString("BookID"), rs.getString("BookName"), rs.getString("AuthorName"), av));
                }
                //rs to arraylist finish

                //arraylist to string
                String[][] s = new String[l.size()][];
                for (int i = 0; i < l.size(); i++) {
                    List<String> row = l.get(i);
                    s[i] = row.toArray(new String[row.size()]);
                }
                //arraylist to string array finish


                /*
                //string array print
                for (String[] a : s) {
                    for (String b : a) {
                        System.out.println(b);
                    }
                }
                //stirng arra print finish
                * 
                */
                
                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

                for (String[] row : s) {
                    model.addRow(row);
                }
                
                if(s.length == 0) {
                    selectedL.setText("No Book Founds");
                }

            } catch (SQLException ex) {
                Logger.getLogger(BookIssueView.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_bookSrcBActionPerformed

    private void issueBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueBActionPerformed
        
        if(studentRollTf.getText().trim().toString().equals("")) {
            JOptionPane.showMessageDialog(null, "Enter a valid roll number", "Input Error", JOptionPane.ERROR_MESSAGE, null);
            
        } else if(jTable1.getSelectedRow() == -1 ) {
            JOptionPane.showMessageDialog(null, "Select a book", "Input Error", JOptionPane.ERROR_MESSAGE, null);
            
        } else if(jTable1.getSelectedRow() > -1) {
            String av = jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 3).toString();            
            
            if(av.equals("No")) {
                JOptionPane.showMessageDialog(null, "This book is not available", "Not Available", JOptionPane.ERROR_MESSAGE, null);
            
            } else {
                String rollT = studentRollTf.getText().trim().toString();
                
                String sql = "SELECT * FROM StudentTable WHERE StudentRoll LIKE '" + rollT + "'";
                int count = 0;
                try {
                    rs = st.executeQuery(sql);

                    while(rs.next()){
                        count++;
                        //System.out.println(rs.getString("StudentRoll"));
                    }                  
                    
                } catch (SQLException ex) {
                    Logger.getLogger(BookIssueView.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                if (count != 1) {
                    JOptionPane.showMessageDialog(null, "Enter Valid Roll No", "Not Available", JOptionPane.ERROR_MESSAGE, null);
                } else {
                    
                    String bookIDT = jTable1.getModel().getValueAt(jTable1.getSelectedRow(), 0).toString();
                    
                    sql = "INSERT INTO TransactionTable (StudentRoll, BookID, IsReturned) values('" + rollT
                            + "', '" + bookIDT + "', No)";
                    //System.out.println(sql);
                    
                    String sqlAvailablity = "UPDATE BookTable SET Availablity = No WHERE BookID LIKE '" + bookIDT + "'";

                    try {
                        st.executeUpdate(sql);
                        st.executeUpdate(sqlAvailablity);
                        JOptionPane.showMessageDialog(null, "Book Issued");
                        
                        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                        model.setValueAt("No", jTable1.getSelectedRow(), 3);
                        
                    } catch (SQLException ex) {
                        Logger.getLogger(BookIssueView.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, "ERROR", "ERROR", JOptionPane.ERROR_MESSAGE, null);
                    }
                }
            } 
        }
        
    }//GEN-LAST:event_issueBActionPerformed

    private void issueBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_issueBMouseClicked
        
    }//GEN-LAST:event_issueBMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
 TransactionWindow obbw = new TransactionWindow();
        obbw.setVisible(true);
        this.dispose();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookIssueView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookIssueView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookIssueView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookIssueView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new BookIssueView().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bookSrcB;
    private javax.swing.JTextField bookSrcTf;
    private javax.swing.JButton issueB;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel selectedL;
    private javax.swing.JTextField studentRollTf;
    // End of variables declaration//GEN-END:variables
}
